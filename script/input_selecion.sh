## Step1, input selection, under different resource budgets
## starting from a pretrained dlrm model
CUDA_VISIBLE_DEVICES=0 python input_selection_train.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --exp_mode input_selection --save-result-dir ../result/0.977_input_selection/ --budget 0.977 --arch-interaction-op cat --slr 0.05 --load-model ../result/baseline_kaggle/best.pt --use-gpu --punit 1 >> 0.977_input_feature_kaggle.txt

CUDA_VISIBLE_DEVICES=1 python input_selection_train.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --exp_mode input_selection --save-result-dir ../result/0.9_input_selection/ --budget 0.9 --arch-interaction-op cat --slr 0.05 --load-model ../result/baseline_kaggle/best.pt --use-gpu --punit 1 >> 0.9_input_feature_kaggle.txt

CUDA_VISIBLE_DEVICES=2 python input_selection_train.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --exp_mode input_selection --save-result-dir ../result/0.83_input_selection/ --budget 0.83 --arch-interaction-op cat --slr 0.05 --load-model ../result/baseline_kaggle/best.pt --use-gpu --punit 1 >> 0.83_input_feature_kaggle.txt

CUDA_VISIBLE_DEVICES=3 python input_selection_train.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --exp_mode input_selection --save-result-dir ../result/0.791_input_selection/ --budget 0.791 --arch-interaction-op cat --slr 0.05 --load-model ../result/baseline_kaggle/best.pt --use-gpu --punit 1 >> 0.791_input_feature_kaggle.txt

## Step2: export mask for zeroing out neurons under different resource budgets
# replace load-model argument with the last model that is trained in step1 
CUDA_VISIBLE_DEVICES=0 python dlrm_generate_mask.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle  --raw-data-file=../kaggle/train.txt  --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save-result-dir ../result/0.977_input_selection/ --arch-interaction-op cat --load-model ../result/0.977_input_selection/last_model.pt --use-gpu 

CUDA_VISIBLE_DEVICES=1 python dlrm_generate_mask.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle  --raw-data-file=../kaggle/train.txt  --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save-result-dir ../result/0.9_input_selection/ --arch-interaction-op cat --load-model ../result/0.9_input_selection/last_model.pt --use-gpu

CUDA_VISIBLE_DEVICES=2 python dlrm_generate_mask.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle  --raw-data-file=../kaggle/train.txt  --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save-result-dir ../result/0.83_input_selection/ --arch-interaction-op cat --load-model ../result/0.83_input_selection/last_model.pt --use-gpu

CUDA_VISIBLE_DEVICES=3 python dlrm_generate_mask.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle  --raw-data-file=../kaggle/train.txt  --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save-result-dir ../result/0.791_input_selection/ --arch-interaction-op cat --load-model ../result/0.791_input_selection/last_model.pt --use-gpu


## Step 3: finetuning under different resource budgets
# replace load-model argument with the last model that is trained in step1 
CUDA_VISIBLE_DEVICES=0 python finetune.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save_result_dir ../result/0.977_input_feature_finetune/--arch-interaction-op cat  --mask_file ../result/0.977_input_feature/mask.pkl --load-model ../result/0.977_input_selection/last_model.pt --use-gpu >> 0.977_input_feature_finetune.txt

CUDA_VISIBLE_DEVICES=1 python finetune.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save_result_dir ../result/0.9_input_feature_finetune/--arch-interaction-op cat  --mask_file ../result/0.9_input_feature/mask.pkl --load-model ../result/0.9_input_selection/last_model.pt --use-gpu >> 0.9_input_feature_finetune.txt

CUDA_VISIBLE_DEVICES=2 python finetune.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save_result_dir ../result/0.83_input_feature_finetune/--arch-interaction-op cat  --mask_file ../result/0.83_input_feature/mask.pkl --load-model ../result/0.83_input_selection/last_model.pt --use-gpu >> 0.83_input_feature_finetune.txt

CUDA_VISIBLE_DEVICES=3 python finetune.py --arch-sparse-feature-size=16 --arch-mlp-bot="13-512-256-64-16" --arch-mlp-top="512-256-1" --data-generation=dataset --data-set=kaggle --raw-data-file=../kaggle/train.txt --processed-data-file=../kaggle/kaggleAdDisplayChallenge_processed.npz --loss-function=bce --round-targets=True --learning-rate=0.1 --mini-batch-size=128 --print-freq=1024 --test-freq=1024 --print-time --test-mini-batch-size=16384 --test-num-workers=16 --save_result_dir ../result/0.791_input_feature_finetune/--arch-interaction-op cat  --mask_file ../result/0.791_input_feature/mask.pkl --load-model ../result/0.791_input_selection/last_model.pt --use-gpu >> 0.791_input_feature_finetune.txt